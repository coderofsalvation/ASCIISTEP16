<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="trust200902" docName="draft-ASCIISTEP16-leonvankammen-00" submissionType="IETF" category="info" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" indexInclude="true" consensus="true">

<front>
<title>ASCIISTEP16</title><seriesInfo value="draft-ASCIISTEP16-leonvankammen-00" stream="IETF" status="informational" name="ASCIISTEP16"></seriesInfo>
<author initials="L.R." surname="van Kammen" fullname="L.R. van Kammen"><organization></organization><address><postal><street></street>
</postal></address></author><date/>
<area>Music</area>
<workgroup>Music</workgroup>

<abstract>
<t>ASCIISTEP16 is pckeyboard standard &amp; translation of popular hardware 16-step drum/midisequencers (electribe MX, electribe SX, mc303, tr909,tr808, mc707, arturia beatstep).
The goal of ASCIISTEP16 is to offer a pckeyboard mode (usually for tracker software) which allows music software to use pckeyboard-keys as music-stepsequencer keys.</t>
</abstract>

</front>

<middle>

<section anchor="what-is-asciistep16"><name>What is ASCIISTEP16</name>
<t>&lt;img src=&quot;https://i.imgur.com/mDsOXqt.png&quot; style=&quot;width:60%&quot;/&gt;</t>
<t>The goal of ASCIISTEP16 is to offer a pckeyboard mode (usually for tracker software) which:</t>

<ul spacing="compact">
<li>can act as a substitute for a hardware stepsequencer (on a pckeyboard)</li>
<li>allows 'grid'-like liveperformance on pckeyboards</li>
<li>allows people coming from the hardware stepsequencer scene to easily use ASCIISTEP16 compatible music-software</li>
<li>allows any unix character-device, or implementation to send 16 stepsequencer-buttons over ascii</li>
</ul>
</section>

<section anchor="implementations"><name>Implementations</name>

<ul spacing="compact">
<li><eref target="https://github.com/coderofsalvation/MilkyTrackerX">MilkyTracker X-build</eref></li>
</ul>
<blockquote><t>please comment on this gist if your software implements ASCIISTEP16</t>
</blockquote></section>

<section anchor="translation-table"><name>Translation table</name>
<t>The table below focuses on QWERTY keyboards, but other keyboard layouts can follow the exact same logic of using the first 2x8 (rows-x-cols) alphabet keys (see image above).</t>
<blockquote><t>the uppercase character is preferred ('Q' instead of 'q' e.g.) to not interfere with normal keymappings of the software.</t>
</blockquote><t>| step | character | comment |
|-|-|-|
| 0 | Q | |
| 1 | W | |
| 2 | E | |
| 3 | R | |
| 4 | T | |
| 5 | Y | international equivalent 'Z' e.g.|
| 6 | U | |
| 7 | I | |
| 8 | A | |
| 9 | S | |
| 10 | D | |
| 11 | F | |
| 12 | G | |
| 13 | H | |
| 14 | J | |
| 15 | K | |</t>
<t>| channel/track | ascii key for muting/selecting |
|-|-|
| 1 | '1' |
| 2 | '2' |
| 3 | '3' |
| 4 | '4' |
| 5 | '5' |
| 6 | '6' |
| 7 | '7' |
| 8 | '8' |
| 9 | '9' |
| 10 | '0' |
| 11 | '-' |
| 12 | '=' |</t>

<section anchor="example-implementation-in-c-c"><name>Example implementation in C/C++</name>

<artwork>/* 
  example usage: 
	  int stepsize = trackerGridSettings.getStepIncrement();                        // optional: allow variable stepsizes
	  int bar      = cursor.row / (16*stepsize);
	  int steprow  = ASCIISTEP16(character,bar) * stepsize;
	  int ch       = ASCIISTEP16_channel(character);                                // ctrl +1 jumps to ch 1 (cursor)
	  if( ch      != -1 ) muteOrSelectChannel( ch, CTRLpressed() );                 // shift+1 (un)mutes ch 1
	  if( steprow != -1 ) writeNote( 'c-4', steprow, getCurrentChannel() );         // write step
	  else writeNote( lowercaseKeyToNote(i), getCursorRow(), getCurrentChannel() ); // write keyjazz note
*/

int ASCIISTEP16(char ascii, unsigned int bar)
{
	int number = -1;
	switch (ascii)
	{
		// ASCIISTEP16 standard (https://gist.github.com/coderofsalvation/8d760b191f4bb5465c8772d5618e5c4b)
		case 'Q': number = 0; break;
		case 'W': number = 1; break;
		case 'E': number = 2; break;
		case 'R': number = 3; break;
		case 'T': number = 4; break;
		case 'Y': number = 5; break;
		case 'U': number = 6; break;
		case 'I': number = 7; break;
		case 'A': number = 8; break;
		case 'S': number = 9; break;
		case 'D': number = 10; break;
		case 'F': number = 11; break;
		case 'G': number = 12; break;
		case 'H': number = 13; break;
		case 'J': number = 14; break;
		case 'K': number = 15; break;
	}
	return number == -1 ? -1 : number + (bar*16);
}

int ASCIISTEP16_channel(char ascii)
{
	int number = -1;
	switch (ascii)
	{
		// ASCIISTEP16 standard (https://gist.github.com/coderofsalvation/8d760b191f4bb5465c8772d5618e5c4b)
		case '1': number = 0; break;
		case '2': number = 1; break;
		case '3': number = 2; break;
		case '4': number = 3; break;
		case '5': number = 4; break;
		case '6': number = 5; break;
		case '7': number = 6; break;
		case '8': number = 7; break;
		case '9': number = 8; break;
		case '0': number = 9; break;
		case '-': number = 10; break;
		case '=': number = 11; break;
	}
	return number;
}
</artwork>
</section>
</section>

<section anchor="quick-win-trackers-keyjazz-enabled-software"><name>Quick win: trackers &amp; 'keyjazz'-enabled software</name>
<t>Most trackers already support octave-switching, transposing-selected note(s), and instrument-switching using keyboard shortcuts. This creates very interesting ASCIISTEP16 workflows by simply implementing ASCIISTEP16.</t>
<blockquote><t>ASCIISTEP16 does not interfere with most trackers/keyjazz enabled daws, since the uppercase characters ('Q' not 'q') are usually unused (or simply translated to lowercase).</t>
</blockquote><t>Hint: CAPS-LOCK &amp; SHIFT act as an ASCIISTEP16 enable/disable-toggle for free!</t>
</section>

<section anchor="bar-pages"><name>Bar pages</name>
<t>Most stepsequencer support multiple bars (for example: the electribes offer 4), which allow for editing longer patterns by repurposing the same 16 step-buttons.</t>
<table>
<thead>
<tr>
<th>bar page</th>
<th>step value</th>
</tr>
</thead>

<tbody>
<tr>
<td>0</td>
<td>1,2,3,5,6,7,8,9,10,11,12,13,14,15,16</td>
</tr>

<tr>
<td>1</td>
<td>17,18,19,20,21,22,23,24,25,26,27</td>
</tr>

<tr>
<td>..</td>
<td>and so on</td>
</tr>
</tbody>
</table><blockquote><t>Basically, each stepvalue is relative based on the current bar-page, and evaluated as <tt>stepvalue * (page*16)</tt> (page starting at 0).</t>
</blockquote></section>

<section anchor="navigating-bar-pages"><name>navigating bar pages</name>
<t>The ASCIISTEP16 standard is to use increment/decrement shortcuts to navigate pages:</t>
<t>*<tt>page-up/down</tt> (to switch to next/previous page, which turns step 1-16 into 17-24 e.g. )
* and/or <tt>arrow up/down</tt> in  <tt>page-down</tt> <strong>in combination</strong> with shift/ctrl/alt etc.</t>
<blockquote><t>This is easy to implement in 99% of trackers, which already support cursor-navigation.
So the implementation is deadsimple to determine &amp; apply the current bar-page:</t>
</blockquote>
<artwork>when entering a key ('E' which translates to asciistep16 value 2 e.g.):
  row = getCurrentRow()
  bar = row / 16
  editrow = asciistep16('Q') + (bar*16) // replace 'Q' with user input
  if( editrow &gt; 0 ) writeNote( note, editrow) // step was entered
</artwork>
</section>

<section anchor="scope-limits"><name>Scope (limits)</name>
<t>ASCIISTEP16 v1 is very simple/limited (therefore an easy standard to implement):</t>

<ul spacing="compact">
<li>ASCIISTEP16 focuses on laptop-friendly shortcuts (first 3 alphanumeric rows + CTRL and SHIFT)</li>
<li>ASCIISTEP16 does not dictate how to change metadata of a step (note-value, volume-value) (see <tt>Quick win</tt> above)</li>
<li>ASCIISTEP16 does not dictate how to control the transport / clock (start/stop/record) e.g.</li>
<li>ASCIISTEP16 does not dictate how to change keyboard mappings</li>
<li>ASCIISTEP16 does not dictate how to toggle/control userinterface elements</li>
</ul>
<blockquote><t>Most trackers/daws already have a default way of doing these things, therefore ASCIISTEP16 stay simple to implement. Ideas for ASCIISTEP16-NOTE, ASCIISTEP16-VOLUME, ASCIISTEP16-TRANSPORT extensions are welcome though.</t>
</blockquote></section>

<section anchor="contact"><name>Contact</name>

<ul spacing="compact">
<li>leonvankammen|gmail.com</li>
</ul>
</section>

<section anchor="iana-considerations"><name>IANA Considerations</name>
<t>This document has no IANA actions.</t>
</section>

<section anchor="acknowledgments"><name>Acknowledgments</name>
<t>TODO acknowledge.</t>
</section>

</middle>

</rfc>
